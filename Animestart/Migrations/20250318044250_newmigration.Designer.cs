// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace animestart.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250318044250_newmigration")]
    partial class newmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("animestart.Models.Anime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContentWarnings")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Era")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("StarterPackId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StarterPackId");

                    b.ToTable("Animes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentWarnings = "",
                            Description = "A boy becomes a demon slayer after his family is killed and his sister turned into a demon.",
                            Era = "Modern",
                            Genre = "Shonen",
                            ImagePath = "",
                            Rating = 5,
                            Title = "Demon Slayer",
                            Year = 2019
                        },
                        new
                        {
                            Id = 2,
                            ContentWarnings = "",
                            Description = "A high school student discovers a supernatural notebook that allows him to kill anyone by writing the victim's name.",
                            Era = "Modern",
                            Genre = "Psychological Thriller",
                            ImagePath = "",
                            Rating = 5,
                            Title = "Death Note",
                            Year = 2006
                        },
                        new
                        {
                            Id = 3,
                            ContentWarnings = "",
                            Description = "Humanity lives inside cities surrounded by enormous walls due to the Titans, gigantic humanoid creatures who devour humans.",
                            Era = "Modern",
                            Genre = "Dark Fantasy",
                            ImagePath = "",
                            Rating = 5,
                            Title = "Attack on Titan",
                            Year = 2013
                        },
                        new
                        {
                            Id = 4,
                            ContentWarnings = "",
                            Description = "A boy born without superpowers in a world where they are common hopes to become a hero.",
                            Era = "Modern",
                            Genre = "Shonen",
                            ImagePath = "",
                            Rating = 5,
                            Title = "My Hero Academia",
                            Year = 2016
                        },
                        new
                        {
                            Id = 5,
                            ContentWarnings = "",
                            Description = "A superhero who can defeat any opponent with a single punch seeks a worthy opponent.",
                            Era = "Modern",
                            Genre = "Action Comedy",
                            ImagePath = "",
                            Rating = 5,
                            Title = "One Punch Man",
                            Year = 2015
                        },
                        new
                        {
                            Id = 6,
                            ContentWarnings = "",
                            Description = "A young ninja seeks recognition from his peers and dreams of becoming the Hokage.",
                            Era = "Modern",
                            Genre = "Shonen",
                            ImagePath = "",
                            Rating = 5,
                            Title = "Naruto",
                            Year = 2002
                        },
                        new
                        {
                            Id = 7,
                            ContentWarnings = "",
                            Description = "Two brothers seek the Philosopher's Stone to restore their bodies after a failed alchemical ritual.",
                            Era = "Modern",
                            Genre = "Adventure",
                            ImagePath = "",
                            Rating = 5,
                            Title = "Fullmetal Alchemist: Brotherhood",
                            Year = 2009
                        },
                        new
                        {
                            Id = 8,
                            ContentWarnings = "",
                            Description = "A self-proclaimed mad scientist discovers a way to send messages to the past.",
                            Era = "Modern",
                            Genre = "Sci-Fi Thriller",
                            ImagePath = "",
                            Rating = 5,
                            Title = "Steins;Gate",
                            Year = 2011
                        });
                });

            modelBuilder.Entity("animestart.Models.AnimeTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AnimeTerms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Genre",
                            Definition = "Anime and manga targeted primarily at teenage boys, typically featuring action-packed stories with strong protagonists.",
                            Term = "Shonen"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Genre",
                            Definition = "Anime and manga targeted primarily at teenage girls, often featuring romance and personal growth stories.",
                            Term = "Shoujo"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Genre",
                            Definition = "Anime and manga targeted at adult men, often featuring more complex themes and mature content.",
                            Term = "Seinen"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Content Warning",
                            Definition = "Anime and manga with mild sexual content or fan service. Important to note for new viewers who may be uncomfortable with this content.",
                            Term = "Ecchi"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Genre",
                            Definition = "Anime featuring giant robots or mechanical suits, often with sci-fi themes.",
                            Term = "Mecha"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Genre",
                            Definition = "Stories where protagonists are transported to another world, often fantasy settings.",
                            Term = "Isekai"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Historical Term",
                            Definition = "Refers to three highly popular anime series: Naruto, Bleach, and One Piece, which dominated the 2000s era.",
                            Term = "The Big Three"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Genre",
                            Definition = "Anime focusing on everyday life experiences, often with minimal conflict or drama.",
                            Term = "Slice of Life"
                        });
                });

            modelBuilder.Entity("animestart.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01adf994-9e85-4f85-b4b5-e98479bbe9be",
                            Email = "admin@animebeginners.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ANIMEBEGINNERS.COM",
                            NormalizedUserName = "ADMIN@ANIMEBEGINNERS.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEALrc/XwEP2GX8Q0NdzSxVJO3lsYgKBs4VKsBIp9fK8CPVdmNatwYsShts6I+WyPaA==",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2025, 3, 17, 21, 42, 49, 908, DateTimeKind.Local).AddTicks(4147),
                            SecurityStamp = "4f478586-f2ba-424e-ae1d-4edf5d150712",
                            TwoFactorEnabled = false,
                            UserName = "admin@animebeginners.com"
                        });
                });

            modelBuilder.Entity("animestart.Models.StarterPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("StarterPacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Perfect for newcomers who enjoy action and adventure. Includes popular shows with straightforward plots and engaging characters.",
                            Name = "Beginner Action Pack"
                        },
                        new
                        {
                            Id = 2,
                            Description = "For viewers who enjoy complex plots and mind-bending stories. These shows require more attention but offer deep narratives.",
                            Name = "Psychological Thriller Starter"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A collection of must-watch classics that have shaped modern anime. Great for understanding anime's evolution.",
                            Name = "Classic Anime Essentials"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Recent high-quality shows that showcase the best of modern animation and storytelling.",
                            Name = "Modern Masterpieces"
                        });
                });

            modelBuilder.Entity("animestart.Models.UserRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRecommendations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnimeId = 1,
                            Comment = "Perfect starter anime with amazing animation and straightforward story.",
                            Rating = 5,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2,
                            AnimeId = 4,
                            Comment = "Great introduction to shonen anime with western superhero elements.",
                            Rating = 4,
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("animestart.Models.UserWatchlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AnimeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("WatchlistItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("animestart.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("animestart.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("animestart.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("animestart.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("animestart.Models.Anime", b =>
                {
                    b.HasOne("animestart.Models.StarterPack", null)
                        .WithMany("Animes")
                        .HasForeignKey("StarterPackId");
                });

            modelBuilder.Entity("animestart.Models.UserRecommendation", b =>
                {
                    b.HasOne("animestart.Models.Anime", "Anime")
                        .WithMany("Recommendations")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("animestart.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("animestart.Models.UserWatchlistItem", b =>
                {
                    b.HasOne("animestart.Models.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("animestart.Models.Anime", b =>
                {
                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("animestart.Models.StarterPack", b =>
                {
                    b.Navigation("Animes");
                });
#pragma warning restore 612, 618
        }
    }
}
